---
title: "Herpailurus yagouaroundi Data Preparation"
format: 
  html:
    toc: true
    toc-location: right
    smooth-scroll: true
    html-math-method: katex
    code-fold: true
self-contained: true
editor: source
author: 'Florencia Grattarola'
date: "`r format(Sys.time(), '%Y-%m-%d')`"
---

Data preparation for modelling for *Herpailurus yagouaroundi*, with the covariates `bio7`, `bio15`, `npp`, and `elev` (selected in the previous step).

  - R Libraries

```{r}
#| label: libraries
#| message: false
#| warning: false
#| code-fold: false

library(knitr)
library(lubridate)
library(tmap)
library(leaflet)
library(patchwork)
library(terra)
library(sf)
sf::sf_use_s2(FALSE)
library(tidyverse)
```

  - Basemaps

```{r}
#| label: basemaps
#| message: false
#| warning: false
#| code-fold: false

equalareaCRS <-  '+proj=laea +lon_0=-73.125 +lat_0=0 +datum=WGS84 +units=m +no_defs'
latam <- st_read('data/latam.gpkg', layer = 'latam', quiet = T)
countries <- st_read('data/latam.gpkg', layer = 'countries', quiet = T)
latam_land <- st_read('data/latam.gpkg', layer = 'latam_land', quiet = T)
latam_raster <- rast('data/latam_raster.tif', lyrs='latam')
latam_countries <- rast('data/latam_raster.tif', lyrs='countries')

# IUCN range distribution
hyagouaroundi_IUCN <- sf::st_read('big_data/hyagouaroundi_IUCN.shp', quiet = T) %>% sf::st_transform(crs=equalareaCRS)

MAP.IUCN <- tm_graticules(alpha = 0.3) +
    tm_shape(countries) +
    tm_fill(col='grey90') +
    tm_borders(col='grey60', alpha = 0.4) +
    tm_shape(hyagouaroundi_IUCN) +
    tm_fill(col='grey20', alpha = 0.4) +
    tm_layout(legend.outside = T, frame.lwd = 0.3, scale=1.2, legend.outside.size = 0.1)

MAP.IUCN
```

## Data

### Species data (PA & PO)

```{r}
#| label: data
#| message: false
#| warning: false
#| code-fold: false

# presence-only rasters
PO_hyagouaroundi_time1_raster <- terra::rast('data/species_POPA_data/PO_hyagouaroundi_time1_raster.tif')
PO_hyagouaroundi_time2_raster <- terra::rast('data/species_POPA_data/PO_hyagouaroundi_time2_raster.tif')

# blobs
PA_hyagouaroundi_time1_blobs <- readRDS('data/species_POPA_data/PA_hyagouaroundi_time1_blobs.rds')
PA_hyagouaroundi_time2_blobs <- readRDS('data/species_POPA_data/PA_hyagouaroundi_time2_blobs.rds')
```


### Covariates

The following covariates were chosen using the 'variableSelection' script:

 - `bio7`: Temperature Annual Range
 - `bio15`: Mean Temperature of Warmest Quarter
 - `npp`: Net Primary Production (NPP)
 - `elev`: Percentage of No Tree Cover

``` {r}
#| echo: true
#| eval: true
#| label: covariates
#| message: false
#| warning: false

bio <- rast(here::here('big_data/bio_high.tif'))
elev <- rast(here::here('big_data/elev_high.tif'))
npp <- rast(here::here('big_data/npp_high.tif'))
npp <- resample(npp, bio, method='bilinear') 
names(npp) <- 'npp'

# environmental layers for PA
env <- c(bio[[c('bio_7','bio_15')]], npp, elev) %>% 
  classify(cbind(NaN, NA))

# resample and scaled values for PO
env_100k_unscaled <- terra::resample(env, latam_raster, method='bilinear') %>% 
  classify(cbind(NaN, NA))

env_100k_resampled <- env_100k_unscaled %>% scale() # scaled values to 0 mean and sd of 1
```

#### Plots

```{r}
#| echo: true
#| eval: true
#| label: covariates-plots
#| message: false
#| warning: false
#| code-fold: false

elev.plot <- tm_graticules(alpha = 0.3) +  
    tm_shape(env_100k_unscaled[["elev"]]) +
    tm_raster(palette = 'BrBG', midpoint = NA, style= "cont", n=10)  + 
    tm_shape(latam) +
    tm_borders(alpha = 0.3) + 
    tm_layout(legend.outside = T, frame.lwd = 0.3, scale=1.2, legend.outside.size = 0.1)

npp.plot <- tm_graticules(alpha = 0.3) +  
    tm_shape(env_100k_unscaled[["npp"]]) +
    tm_raster(palette = 'BuGn', midpoint = NA, style= "cont")  + 
    tm_shape(latam) +
    tm_borders(alpha = 0.3) + 
    tm_layout(legend.outside = T, frame.lwd = 0.3, scale=1.2, legend.outside.size = 0.1)

bio_7.plot <- tm_graticules(alpha = 0.3) +  
    tm_shape(env_100k_unscaled[["bio_7"]]) +
    tm_raster(palette = 'RdYlBu', midpoint = NA, style= "cont")  + 
    tm_shape(latam) +
    tm_borders(alpha = 0.3) + 
    tm_layout(legend.outside = T, frame.lwd = 0.3, scale=1.2, legend.outside.size = 0.1)

bio_15.plot <- tm_graticules(alpha = 0.3) +  
    tm_shape(env_100k_unscaled[["bio_15"]]) +
    tm_raster(palette = 'PuOr', midpoint = NA, style= "cont")  + 
    tm_shape(latam) +
    tm_borders(alpha = 0.3) + 
    tm_layout(legend.outside = T, frame.lwd = 0.3, scale=1.2, legend.outside.size = 0.1)

elev.plot 
npp.plot
bio_7.plot
bio_15.plot
```

### Thinning parametres 

 - `acce`: Accessibility
 - `country`: Country of origin
 
``` {r}
#| echo: true
#| eval: true
#| label: thinning-parameters
#| message: false
#| warning: false

acce_100k_resampled <- terra::rast('big_data/acce.tif') %>% 
  classify(cbind(NaN, NA)) # values are scaled
```

#### Plot

```{r}
#| echo: true
#| eval: true
#| label: thinning-plots
#| message: false
#| warning: false
#| code-fold: false

acce.plot <- tm_graticules(alpha = 0.3) +  
    tm_shape(acce_100k_resampled[["acce"]]) +
    tm_raster(palette = 'RdYlBu', midpoint = NA, style= "cont", n=10)  + 
    tm_shape(latam) +
    tm_borders(alpha = 0.3) + 
    tm_layout(legend.outside = T, frame.lwd = 0.3, scale=1.2, legend.outside.size = 0.1)

acce.plot
```

## Data for the model

### Presence-only data

``` {r}
#| echo: true
#| eval: true
#| label: PO-data-for-model
#| message: false
#| warning: false

# calculate area in each raster cell
PO_hyagouaroundi.area <- terra::cellSize(PO_hyagouaroundi_time1_raster[[1]], unit='m', transform=F) %>% 
  classify(cbind(NaN, NA)) %>% terra::values()

# calculate coordinates for each raster cell
PO_hyagouaroundi.coords <- terra::xyFromCell(PO_hyagouaroundi_time1_raster, cell=1:ncell(PO_hyagouaroundi_time1_raster)) %>% as.data.frame()
names(PO_hyagouaroundi.coords) <- c('X', 'Y')

# number of cells in the rasters (both the same)
PO_hyagouaroundi.cell <- 1:ncell(PO_hyagouaroundi_time1_raster)

# with the environmental variables values for each cell
PO_hyagouaroundi.env <- env_100k_resampled[] # scaled values

# with the mean accessibility value for each cell
PO_hyagouaroundi.acce <- acce_100k_resampled # scaled values

# calculate point count in each raster cell
PO_hyagouaroundi_time1.count <- PO_hyagouaroundi_time1_raster %>%
    classify(cbind(NaN, NA)) %>% terra::values() %>% as_tibble %>% 
  dplyr::select(count)

PO_hyagouaroundi_time2.count <- PO_hyagouaroundi_time2_raster %>%
    classify(cbind(NaN, NA)) %>% terra::values() %>% as_tibble %>% 
  dplyr::select(count)

PO_hyagouaroundi.countries <- latam_countries %>% classify(cbind(NaN, NA))

# save time1 and time2 datasets 
PO_hyagouaroundi_time1.model.data <- data.frame(PO_hyagouaroundi.coords,
                                            pixel = PO_hyagouaroundi.cell[],
                                            area = PO_hyagouaroundi.area,
                                            pt.count = PO_hyagouaroundi_time1.count,
                                            env = PO_hyagouaroundi.env,
                                            acce = PO_hyagouaroundi.acce[], 
                                            country = PO_hyagouaroundi.countries[])

PO_hyagouaroundi_time2.model.data <- data.frame(PO_hyagouaroundi.coords,
                                            pixel = PO_hyagouaroundi.cell[],
                                            area = PO_hyagouaroundi.area,
                                            pt.count = PO_hyagouaroundi_time2.count,
                                            env = PO_hyagouaroundi.env,
                                            acce = PO_hyagouaroundi.acce[], 
                                            country = PO_hyagouaroundi.countries[])

```

 - Check data

```{r}
#| echo: true
#| eval: true
#| label: PO-data-for-model-check
#| message: false
#| warning: false

head(PO_hyagouaroundi_time1.model.data) %>% kable()
head(PO_hyagouaroundi_time2.model.data) %>% kable()
```

### Presence-absence data 

```{r}
#| echo: true
#| eval: true
#| label: PA-data-for-model
#| message: false
#| warning: false

# calculate area, coordinates, and point count in each raster cell
PA_hyagouaroundi.area.time1 <- as.numeric(PA_hyagouaroundi_time1_blobs$blobArea) 
PA_hyagouaroundi.area.time2 <- as.numeric(PA_hyagouaroundi_time2_blobs$blobArea) 

PA_hyagouaroundi.coords.time1 <- st_coordinates(st_centroid(PA_hyagouaroundi_time1_blobs)) %>% as_tibble()
PA_hyagouaroundi.coords.time2 <- st_coordinates(st_centroid(PA_hyagouaroundi_time2_blobs)) %>% as_tibble()

PA_hyagouaroundi.pixel.time1 <- terra::cells(PO_hyagouaroundi_time1_raster, vect(st_centroid(PA_hyagouaroundi_time1_blobs))) 
PA_hyagouaroundi.pixel.time2 <- terra::cells(PO_hyagouaroundi_time2_raster, vect(st_centroid(PA_hyagouaroundi_time2_blobs))) 

# mode to calculate the most frequent value for the blob - this needs to be changed to getting the %are for each landcover
mode_raster  <- function(x, na.rm = FALSE) {
  if(na.rm){ x = x[!is.na(x)]}
  ux <- unique(x)
  return(ux[which.max(tabulate(match(x, ux)))])
}

PA_hyagouaroundi.env.time1 <- terra::extract(x = env, 
                                             y = vect(PA_hyagouaroundi_time1_blobs), 
                                             fun = mean, na.rm=TRUE) %>% 
  mutate(across(where(is.numeric), ~ifelse(is.nan(.), NA, .))) %>% scale()

PA_hyagouaroundi.env.time2 <- terra::extract(x = env, 
                                             y = vect(PA_hyagouaroundi_time2_blobs), 
                                             fun = mean, na.rm=TRUE) %>% 
  mutate(across(where(is.numeric), ~ifelse(is.nan(.), NA, .))) %>% scale()

PA_hyagouaroundi_time1.model.data <- data.frame(pixel = PA_hyagouaroundi.pixel.time1, 
                                            PA_hyagouaroundi.coords.time1,
                                            area = PA_hyagouaroundi.area.time1,
                                            presabs = PA_hyagouaroundi_time1_blobs$presence,
                                            effort = PA_hyagouaroundi_time1_blobs$effort,
                                            env = PA_hyagouaroundi.env.time1[,2:5])

PA_hyagouaroundi_time2.model.data <- data.frame(pixel = PA_hyagouaroundi.pixel.time2, 
                                            PA_hyagouaroundi.coords.time2,
                                            area = PA_hyagouaroundi.area.time2,
                                            presabs = PA_hyagouaroundi_time2_blobs$presence,
                                            effort = PA_hyagouaroundi_time2_blobs$effort,
                                            env = PA_hyagouaroundi.env.time2[,2:5])

```

  - Check data

```{r}
#| echo: true
#| eval: true
#| label: PA-data-for-model-check
#| message: false
#| warning: false

head(PA_hyagouaroundi_time1.model.data) %>% kable()
head(PA_hyagouaroundi_time2.model.data) %>% kable()
```


## Save data

```{r}
#| echo: true
#| eval: false
#| label: save-data
#| message: false
#| warning: false
#| code-fold: false

saveRDS(PO_hyagouaroundi_time1.model.data, 'data/species_POPA_data/data_hyagouaroundi_PO_time1.rds')
saveRDS(PO_hyagouaroundi_time2.model.data, 'data/species_POPA_data/data_hyagouaroundi_PO_time2.rds')
saveRDS(PA_hyagouaroundi_time1.model.data, 'data/species_POPA_data/data_hyagouaroundi_PA_time1.rds')
saveRDS(PA_hyagouaroundi_time2.model.data, 'data/species_POPA_data/data_hyagouaroundi_PA_time2.rds')
```


## Extra: Datasets in the covariate space

The range (and interquartile range) of values for each covariate that is sampled by each dataset

```{r}
#| echo: true
#| eval: true
#| label: IQR
#| message: false
#| warning: false

getRangeIQR <- function(env_PX){
  env_PX.df <- tibble(env= character(),
                          range = numeric(),
                     iqr = numeric(),
                     stringsAsFactors=FALSE)
  
  for (i in 1:ncol(env_PX)){
    df <- tibble(env = names(env_PX[i]),
             range = range(env_PX[[i]], na.rm=T)[2],
             iqr=  IQR(env_PA[[i]], na.rm = T))
    env_PX.df <- rbind(env_PX.df, df)
  }
  return(env_PX.df)
}

# covariates for PA
env_PA <- terra::extract(x = env, 
                         y = rbind(vect(PA_hyagouaroundi_time1_blobs), 
                                   vect(PA_hyagouaroundi_time2_blobs)), 
                                     fun = mean, na.rm=TRUE) %>% 
  mutate(across(where(is.numeric), ~ifelse(is.nan(.), NA, .))) 

summary(env_PA[-1])

env_PA.RangeIQR <- getRangeIQR(env_PA[-1]) %>% mutate(data='PA')

for (i in 2:ncol(env_PA)){
    range <- range(env_PA[[i]], na.rm=T)[2]
    iqr <- IQR(env_PA[[i]], na.rm = T)
    print(str_glue('PA {names(env_PA[i])} -> range: {range} - IQR: {iqr}'))
}

# covariates layers for PO
env_PO <- terra::resample(env, latam_raster, method='bilinear') %>% 
  classify(cbind(NaN, NA)) %>% as.data.frame()

summary(env_PO)

env_PO.RangeIQR <- getRangeIQR(env_PO) %>% mutate(data='PO')

for (i in 1:ncol(env_PO)){
    range <- range(env_PO[[i]], na.rm=T)[2]
    iqr <- IQR(env_PO[[i]], na.rm = T)
    print(str_glue('PO {names(env_PO[i])} -> range: {range} - IQR: {iqr}'))
}
```

